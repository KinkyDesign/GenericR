request <- fromJSON("/Users/pantelispanka/Jaqpot/GenericR/predictionRequest.json")
predict_gen(request$dataset, request$rawModel, request$additionalInfo)
predict <- function(dataset, rawModel, additionalInfo){
feats <- colnames(dataset$dataEntry[,2])
rows_data <- length(dataset$dataEntry$values[,2])
df <- data.frame(matrix(0, ncol = 0, nrow = rows_data))
for(i in feats){
fe <- additionalInfo$independentFeatures[i][[i]]
feval <- dataset$dataEntry$values[i][,1]
df[fe] <- feval
}
mod_t <- base64Decode(rawModel,'raw')
model <- unserialize(mod_t)
model <- mod$MODEL
predFeat <- additionalInfo$predictedFeatures[1][[1]]
prediction <- predict(model, df)
datpred <-list(predictions=c(predFeat, prediction))
return(datpred)
}
predict_gen(request$dataset, request$rawModel, request$additionalInfo)
require(base64enc)
predict_gen(request$dataset, request$rawModel, request$additionalInfo)
predict <- function(dataset, rawModel, additionalInfo){
feats <- colnames(dataset$dataEntry[,2])
rows_data <- length(dataset$dataEntry$values[,2])
df <- data.frame(matrix(0, ncol = 0, nrow = rows_data))
for(i in feats){
fe <- additionalInfo$independentFeatures[i][[i]]
feval <- dataset$dataEntry$values[i][,1]
df[fe] <- feval
}
mod_t <- base64decode(rawModel,'raw')
model <- unserialize(mod_t)
model <- mod$MODEL
predFeat <- additionalInfo$predictedFeatures[1][[1]]
prediction <- predict(model, df)
datpred <-list(predictions=c(predFeat, prediction))
return(datpred)
}
predict_gen(request$dataset, request$rawModel, request$additionalInfo)
predict <- function(dataset, rawModel, additionalInfo){
feats <- colnames(dataset$dataEntry[,2])
rows_data <- length(dataset$dataEntry$values[,2])
df <- data.frame(matrix(0, ncol = 0, nrow = rows_data))
for(i in feats){
fe <- additionalInfo$independentFeatures[i][[i]]
feval <- dataset$dataEntry$values[i][,1]
df[fe] <- feval
}
raw <- rawModel
mod_t <- base64decode(raw,'raw')
model <- unserialize(mod_t)
model <- mod$MODEL
predFeat <- additionalInfo$predictedFeatures[1][[1]]
prediction <- predict(model, df)
datpred <-list(predictions=c(predFeat, prediction))
return(datpred)
}
predict_gen(request$dataset, request$rawModel, request$additionalInfo)
predict <- function(dataset, rawModel, additionalInfo){
feats <- colnames(dataset$dataEntry[,2])
rows_data <- length(dataset$dataEntry$values[,2])
df <- data.frame(matrix(0, ncol = 0, nrow = rows_data))
for(i in feats){
fe <- additionalInfo$independentFeatures[i][[i]]
feval <- dataset$dataEntry$values[i][,1]
df[fe] <- feval
}
mod <- unserialize(base64_dec( rawModel))
model <- mod$MODEL
predFeat <- additionalInfo$predictedFeatures[1][[1]]
prediction <- predict(model, df)
datpred <-list(predictions=c(predFeat, prediction))
return(datpred)
}
predict_gen(request$dataset, request$rawModel, request$additionalInfo)
predict <- function(dataset, rawModel, additionalInfo){
feats <- colnames(dataset$dataEntry[,2])
rows_data <- length(dataset$dataEntry$values[,2])
df <- data.frame(matrix(0, ncol = 0, nrow = rows_data))
for(i in feats){
fe <- additionalInfo$independentFeatures[i][[i]]
feval <- dataset$dataEntry$values[i][,1]
df[fe] <- feval
}
mod <- unserialize(base64_dec( as.raw(rawModel)))
model <- mod$MODEL
predFeat <- additionalInfo$predictedFeatures[1][[1]]
prediction <- predict(model, df)
datpred <-list(predictions=c(predFeat, prediction))
return(datpred)
}
predict_gen(request$dataset, request$rawModel, request$additionalInfo)
request$rawModel
predict <- function(dataset, rawModel, additionalInfo){
feats <- colnames(dataset$dataEntry[,2])
rows_data <- length(dataset$dataEntry$values[,2])
df <- data.frame(matrix(0, ncol = 0, nrow = rows_data))
for(i in feats){
fe <- additionalInfo$independentFeatures[i][[i]]
feval <- dataset$dataEntry$values[i][,1]
df[fe] <- feval
}
mod <- unserialize(base64_dec(rawModel))
model <- mod$MODEL
predFeat <- additionalInfo$predictedFeatures[1][[1]]
prediction <- predict(model, df)
datpred <-list(predictions=c(predFeat, prediction))
return(datpred)
}
request$rawModel
predict_gen(request$dataset, request$rawModel, request$additionalInfo)
mod <- unserialize(base64_dec(request$rawModel))
mod
mod$MODEL
mod <- unserialize(base64_dec(request$rawModel))
predictgen <- function(dataset, rawModel, additionalInfo){
feats <- colnames(dataset$dataEntry[,2])
rows_data <- length(dataset$dataEntry$values[,2])
df <- data.frame(matrix(0, ncol = 0, nrow = rows_data))
for(i in feats){
fe <- additionalInfo$independentFeatures[i][[i]]
feval <- dataset$dataEntry$values[i][,1]
df[fe] <- feval
}
mod <- unserialize(base64_dec(rawModel))
model <- mod$MODEL
predFeat <- additionalInfo$predictedFeatures[1][[1]]
prediction <- predict(model, df)
datpred <-list(predictions=c(predFeat, prediction))
return(datpred)
}
rm(predict
)
predictgen(request$dataset, request$rawModel, request$additionalInfo)
mod <- unserialize(base64_dec(request$rawModel))
rm(mod)
rm(test)
rm(check)
rm(j)
rm(i)
rm(feats)
View(predictgen)
View(predict_gen)
View(predictgen)
View(predict_gen)
View(predictgen)
View(predict_gen)
View(predictgen)
rm(predict_gen)
View(predictgen)
mod <- unserialize(base64_dec(request$rawModel))
predictgen(request$dataset, request$rawModel, request$additionalInfo)
predictgen <- function(dataset, rawModel, additionalInfo){
feats <- colnames(dataset$dataEntry[,2])
rows_data <- length(dataset$dataEntry$values[,2])
df <- data.frame(matrix(0, ncol = 0, nrow = rows_data))
for(i in feats){
fe <- additionalInfo$independentFeatures[i][[i]]
feval <- dataset$dataEntry$values[i][,1]
df[fe] <- feval
}
raw <- rawModel
mod <- unserialize(base64_dec(raw))
model <- mod$MODEL
predFeat <- additionalInfo$predictedFeatures[1][[1]]
prediction <- predict(model, df)
datpred <-list(predictions=c(predFeat, prediction))
return(datpred)
}
predictgen(request$dataset, request$rawModel, request$additionalInfo)
request$rawModel
predictgen <- function(dataset, rawModel, additionalInfo){
feats <- colnames(dataset$dataEntry[,2])
rows_data <- length(dataset$dataEntry$values[,2])
df <- data.frame(matrix(0, ncol = 0, nrow = rows_data))
for(i in feats){
fe <- additionalInfo$independentFeatures[i][[i]]
feval <- dataset$dataEntry$values[i][,1]
df[fe] <- feval
}
raw <- rawModel
print(raw)
mod <- unserialize(base64_dec(raw))
model <- mod$MODEL
predFeat <- additionalInfo$predictedFeatures[1][[1]]
prediction <- predict(model, df)
datpred <-list(predictions=c(predFeat, prediction))
return(datpred)
}
request$rawModel
predictgen(request$dataset, request$rawModel, request$additionalInfo)
predictgen_check <- function(dataset, rawModel, additionalInfo){
feats <- colnames(dataset$dataEntry[,2])
rows_data <- length(dataset$dataEntry$values[,2])
df <- data.frame(matrix(0, ncol = 0, nrow = rows_data))
for(i in feats){
fe <- additionalInfo$independentFeatures[i][[i]]
feval <- dataset$dataEntry$values[i][,1]
df[fe] <- feval
}
raw <- rawModel
print(raw)
mod <- unserialize(base64_dec(raw))
model <- mod$MODEL
predFeat <- additionalInfo$predictedFeatures[1][[1]]
prediction <- predict(model, df)
datpred <-list(predictions=c(predFeat, prediction))
return(datpred)
}
predictgen_check(request$dataset, request$rawModel, request$additionalInfo)
rm(predict)
detach(GenericR, unload=TRUE)
detach("package:GenericR", unload=TRUE)
predictgeneric <- function(dataset, rawModel, additionalInfo){
feats <- colnames(dataset$dataEntry[,2])
rows_data <- length(dataset$dataEntry$values[,2])
df <- data.frame(matrix(0, ncol = 0, nrow = rows_data))
for(i in feats){
fe <- additionalInfo$independentFeatures[i][[i]]
feval <- dataset$dataEntry$values[i][,1]
df[fe] <- feval
}
raw <- rawModel
mod <- unserialize(base64_dec(raw))
model <- mod$MODEL
predFeat <- additionalInfo$predictedFeatures[1][[1]]
prediction <- predict(model, df)
datpred <-list(predictions=c(predFeat, prediction))
return(datpred)
}
predictgeneric(request$dataset, request$rawModel, request$additionalInfo)
library(GenericR)
te <- predictgeneric(request$dataset, request$rawModel, request$additionalInfo)
toJSON(te)
te
predictgeneric <- function(dataset, rawModel, additionalInfo){
feats <- colnames(dataset$dataEntry[,2])
rows_data <- length(dataset$dataEntry$values[,2])
df <- data.frame(matrix(0, ncol = 0, nrow = rows_data))
for(i in feats){
fe <- additionalInfo$independentFeatures[i][[i]]
feval <- dataset$dataEntry$values[i][,1]
df[fe] <- feval
}
mod <- unserialize(base64_dec(rawModel))
model <- mod$MODEL
predFeat <- additionalInfo$predictedFeatures[1][[1]]
predictions <- predict(model, df)
for(i in 1:length(predictions)){
prediction<- data.frame(predictions[i])
colnames(prediction)<- predFeat
if(i==1){lh_preds<- list(unbox(prediction))
}else{
lh_preds[[i]]<- unbox(w1)
}
}
datpred <-list(predictions=lh_preds)
return(datpred)
}
te <- predictgeneric(request$dataset, request$rawModel, request$additionalInfo)
predictgeneric <- function(dataset, rawModel, additionalInfo){
feats <- colnames(dataset$dataEntry[,2])
rows_data <- length(dataset$dataEntry$values[,2])
df <- data.frame(matrix(0, ncol = 0, nrow = rows_data))
for(i in feats){
fe <- additionalInfo$independentFeatures[i][[i]]
feval <- dataset$dataEntry$values[i][,1]
df[fe] <- feval
}
mod <- unserialize(base64_dec(rawModel))
model <- mod$MODEL
predFeat <- additionalInfo$predictedFeatures[1][[1]]
predictions <- predict(model, df)
for(i in 1:length(predictions)){
prediction<- data.frame(predictions[i])
colnames(prediction)<- predFeat
if(i==1){lh_preds<- list(unbox(prediction))
}else{
lh_preds[[i]]<- unbox(prediction)
}
}
datpred <-list(predictions=lh_preds)
return(datpred)
}
te <- predictgeneric(request$dataset, request$rawModel, request$additionalInfo)
toJSON(te)
library(GenericR)
library(GenericR)
library("rjson")
library("jsonlite")
jsonReq <- fromJSON(file = '/Users/pantelispanka/Desktop/predReq.json')
jsonReq <- fromJSON(file = '/Users/pantelispanka/Desktop/predReq.json')
library(RJSONIO)
install.packages("rjson")
require(rjson)
jsonReq <- rjson::fromJSON(file = '/Users/pantelispanka/Desktop/predReq.json')
jsonReq
predictgeneric <- function(dataset, rawModel, additionalInfo){
feats <- colnames(dataset$dataEntry[,2])
rows_data <- length(dataset$dataEntry$values[,2])
df <- data.frame(matrix(0, ncol = 0, nrow = rows_data))
for(i in feats){
fe <- additionalInfo$independentFeatures[i][[i]]
feval <- dataset$dataEntry$values[i][,1]
df[fe] <- feval
}
mod <- unserialize(base64_dec(rawModel))
model <- mod$MODEL
predFeat <- additionalInfo$predictedFeatures[1][[1]]
predictions <- predict(model, df)
for(i in 1:length(predictions)){
prediction<- data.frame(predictions[i])
colnames(prediction)<- predFeat
if(i==1){lh_preds<- list(unbox(prediction))
}else{
lh_preds[[i]]<- unbox(prediction)
}
}
datpred <-list(predictions=lh_preds)
return(datpred)
}
predictgeneric(jsonReq$dataset, jsonReq$rawModel, jsonReq$additionalInfo)
dataset$dataEntry[,2]
jsonReq$dataset$dataEntry[,2]
jsonReq$dataset$dataEntry[,1]
jsonReq$dataset$dataEntry[,3]
jsonReq$dataset$dataEntry[1,2]
jsonReq$dataset$dataEntry
jsonReq$dataset$dataEntry[,2]
jsonReq$dataset$dataEntry[0,2]
jsonReq$dataset$dataEntry[0,3]
dim(jsonReq$dataset$dataEntry)
typeof(jsonReq$dataset$dataEntry)
length(jsonReq$dataset$dataEntry)
jsonReq$dataset$dataEntry[1]
jsonReq$dataset$dataEntry[1]
jsonReq$dataset$dataEntry[,1]
jsonReq$dataset$dataEntry[2]
jsonReq$dataset$dataEntry[3]
jsonReq$dataset$dataEntry[1]
jsonReq$dataset$dataEntry[1,1]
jsonReq$dataset$dataEntry[1][1]
dataset$dataEntry$values[1]
jsonReq$dataset$dataEntry$values[1]
jsonReq$dataset$dataEntry$values[]
jsonReq$dataset$dataEntry$values
jsonReq$dataset$dataEntry$values[,1]
jsonReq$dataset$dataEntry
jsonReq$dataset$dataEntry[1][1]
jsonReq$dataset$dataEntry[1][[1]]
jsonReq$dataset$dataEntry[1][[1]][1]
jsonReq$dataset$dataEntry[1][[1]][2]
jsonReq$dataset$dataEntry[1][[1]][2][1]
jsonReq$dataset$dataEntry[1][[1]][2][1][1]
jsonReq$dataset$dataEntry[1][[1]][2][1]
jsonReq$dataset$dataEntry[1][[1]][2]
colnames(jsonReq$dataset$dataEntry[1][[1]][2])
colnames(jsonReq$dataset$dataEntry[1][[1]])
colnames(jsonReq$dataset$dataEntry[1])
colnames(jsonReq$dataset$dataEntry[,1])
colnames(jsonReq$dataset$dataEntry[1])
jsonReq$dataset$dataEntry
jsonReq$dataset$dataEntry
jsonReq$dataset$dataEntry[1]
jsonReq <- rjson::fromJSON(file = '/Users/pantelispanka/Desktop/predReq.json')
jsonReq$dataset$dataEntry[1]
jsonReq$dataset$dataEntry[2]
jsonReq$dataset$dataEntry
jsonReq$dataset$dataEntry[]
jsonReq$dataset$dataEntry[][1]
jsonReq$dataset$dataEntry[,1]
jsonReq$dataset$dataEntry[,[1]]
jsonReq$dataset$dataEntry[[,1]]
jsonReq$dataset$dataEntry[[1]]
jsonReq$dataset$dataEntry[[2]]
jsonReq$dataset$dataEntry[[1]]
dataset$dataEntry$values
jsonReq$dataset$dataEntry$values
j <- jsonlite::fromJSON(jsonReq)
j <- jsonlite::fromJSON(/Users/pantelispanka/Desktop/predReq1.txt'')
j <- jsonlite::fromJSON('/Users/pantelispanka/Desktop/predReq1.txt')
j$dataset$dataEntry$values
colnames(j$dataset$dataEntry$values)
predictgeneric <- function(dataset, rawModel, additionalInfo){
feats <- colnames(dataset$dataEntry)
rows_data <- length(dataset$dataEntry$values[,2])
df <- data.frame(matrix(0, ncol = 0, nrow = rows_data))
for(i in feats){
fe <- additionalInfo$independentFeatures[i][[i]]
feval <- dataset$dataEntry$values[i][,1]
df[fe] <- feval
}
mod <- unserialize(base64_dec(rawModel))
model <- mod$MODEL
predFeat <- additionalInfo$predictedFeatures[1][[1]]
predictions <- predict(model, df)
for(i in 1:length(predictions)){
prediction<- data.frame(predictions[i])
colnames(prediction)<- predFeat
if(i==1){lh_preds<- list(unbox(prediction))
}else{
lh_preds[[i]]<- unbox(prediction)
}
}
datpred <-list(predictions=lh_preds)
return(datpred)
}
predictgeneric(j$dataset, j$rawModel, j$additionalInfo)
feats <- colnames(dataset$dataEntry)
dataset <- j$dataset
rawModel <- j$rawModel
additionalInfo <- j$additionalInfo
feats <- colnames(dataset$dataEntry)
rows_data <- length(dataset$dataEntry$values[,2])
df <- data.frame(matrix(0, ncol = 0, nrow = rows_data))
for(i in feats){
fe <- additionalInfo$independentFeatures[i][[i]]
feval <- dataset$dataEntry$values[i][,1]
df[fe] <- feval
}
dataset$dataEntry$values[1][,1]
dataset$dataEntry$values[2][,1]
fe
additionalInfo$independentFeatures[1][[1]]
additionalInfo$independentFeatures[1][[2]]
additionalInfo$independentFeatures[1][[1]]
additionalInfo$independentFeatures[2][[2]]
additionalInfo$independentFeatures[2][[1]]
additionalInfo$independentFeatures[3][[1]]
for(i in feats){
fe <- additionalInfo$independentFeatures[i][[1]]
feval <- dataset$dataEntry$values[i][,1]
df[fe] <- feval
}
for(i in feats){
print(i)
fe <- additionalInfo$independentFeatures[i][[1]]
feval <- dataset$dataEntry$values[i][,1]
df[fe] <- feval
}
additionalInfo$independentFeatures
additionalInfo$independentFeatures[1]
additionalInfo$independentFeatures[,1]
additionalInfo$independentFeatures[]
feats
colnames(dataset$dataEntry)
colnames(dataset$dataEntry$values)
feats <- colnames(dataset$dataEntry$values)
rows_data <- length(dataset$dataEntry$values[,2])
df <- data.frame(matrix(0, ncol = 0, nrow = rows_data))
for(i in feats){
print(i)
fe <- additionalInfo$independentFeatures[i][[1]]
feval <- dataset$dataEntry$values[i][,1]
df[fe] <- feval
}
for(i in feats){
fe <- additionalInfo$independentFeatures[i][[1]]
feval <- dataset$dataEntry$values[i][,1]
df[fe] <- feval
}
mod <- unserialize(base64_dec(rawModel))
model <- mod$MODEL
predFeat <- additionalInfo$predictedFeatures[1][[1]]
df
predictions <- predict(model, df)
for(i in 1:length(predictions)){
prediction<- data.frame(predictions[i])
colnames(prediction)<- predFeat
if(i==1){lh_preds<- list(unbox(prediction))
}else{
lh_preds[[i]]<- unbox(prediction)
}
}
datpred <-list(predictions=lh_preds)
jsonlite::toJSON(datpred)
library(GenericR)
require(roxygen2)
library(GenericR)
predictgeneric <- function(dataset, rawModel, additionalInfo){
feats <- colnames(dataset$dataEntry$values)
rows_data <- length(dataset$dataEntry$values[,2])
df <- data.frame(matrix(0, ncol = 0, nrow = rows_data))
for(i in feats){
fe <- additionalInfo$independentFeatures[i][[1]]
feval <- dataset$dataEntry$values[i][,1]
df[fe] <- feval
}
mod <- unserialize(base64_dec(rawModel))
model <- mod$MODEL
predFeat <- additionalInfo$predictedFeatures[1][[1]]
predictions <- predict(model, df)
for(i in 1:length(predictions)){
prediction<- data.frame(predictions[i])
colnames(prediction)<- predFeat
if(i==1){lh_preds<- list(unbox(prediction))
}else{
lh_preds[[i]]<- unbox(prediction)
}
}
datpred <-list(predictions=lh_preds)
return(datpred)
}
predictgeneric(j$dataset, j$rawModel, j$additionalInfo)
library(GenericR)
library(roxygen2)
install.packages("roxygen2")
library(roxygen2)
library(GenericR)
library(GenericR)
library(GenericR)
